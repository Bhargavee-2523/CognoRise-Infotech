import math

# Constants
PLAYER = 'O'
AI = 'X'
EMPTY = ' '

# Initialize the board
board = [
    [EMPTY, EMPTY, EMPTY],
    [EMPTY, EMPTY, EMPTY],
    [EMPTY, EMPTY, EMPTY]
]

# Function to print the board
def print_board(board):
    for row in board:
        print("|".join(row))
        print("-" * 5)

# Function to check if there are any moves left on the board
def is_moves_left(board):
    for row in board:
        if EMPTY in row:
            return True
    return False

# Function to evaluate the board and check for a winner
def evaluate(board):
    # Check rows for a win
    for row in board:
        if row[0] == row[1] == row[2] != EMPTY:
            return 10 if row[0] == AI else -10

    # Check columns for a win
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] != EMPTY:
            return 10 if board[0][col] == AI else -10

    # Check diagonals for a win
    if board[0][0] == board[1][1] == board[2][2] != EMPTY:
        return 10 if board[0][0] == AI else -10
    if board[0][2] == board[1][1] == board[2][0] != EMPTY:
        return 10 if board[0][2] == AI else -10

    # No winner
    return 0

# Minimax algorithm
def minimax(board, depth, is_max):
    score = evaluate(board)

    # If AI has won
    if score == 10:
        return score - depth

    # If player has won
    if score == -10:
        return score + depth

    # If no more moves and no winner
    if not is_moves_left(board):
        return 0

    # If this is the maximizer's move
    if is_max:
        best = -math.inf

        # Traverse all cells
        for i in range(3):
            for j in range(3):
                # Check if cell is empty
                if board[i][j] == EMPTY:
                    # Make the move
                    board[i][j] = AI

                    # Call minimax recursively and choose the maximum value
                    best = max(best, minimax(board, depth + 1, not is_max))

                    # Undo the move
                    board[i][j] = EMPTY
        return best

    # If this is the minimizer's move
    else:
        best = math.inf

        # Traverse all cells
        for i in range(3):
            for j in range(3):
                # Check if cell is empty
                if board[i][j] == EMPTY:
                    # Make the move
                    board[i][j] = PLAYER

                    # Call minimax recursively and choose the minimum value
                    best = min(best, minimax(board, depth + 1, not is_max))

                    # Undo the move
                    board[i][j] = EMPTY
        return best

# Function to find the best move for AI
def find_best_move(board):
    best_val = -math.inf
    best_move = (-1, -1)

    # Traverse all cells
    for i in range(3):
        for j in range(3):
            # Check if cell is empty
            if board[i][j] == EMPTY:
                # Make the move
                board[i][j] = AI

                # Compute evaluation function for this move
                move_val = minimax(board, 0, False)

                # Undo the move
                board[i][j] = EMPTY

                # If the value of the current move is more than the best value, update best value
                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val

    return best_move

# Main game loop
def play_game():
    while True:
        print_board(board)
        
        # Player move
        if is_moves_left(board) and evaluate(board) == 0:
            row, col = map(int, input("Enter your move (row and column): ").split())
            if board[row][col] == EMPTY:
                board[row][col] = PLAYER
            else:
                print("Invalid move. Try again.")
                continue
        
        # Check if the game is over
        if evaluate(board) == -10:
            print_board(board)
            print("Player wins!")
            break
        elif not is_moves_left(board):
            print_board(board)
            print("It's a draw!")
            break

        # AI move
        if is_moves_left(board) and evaluate(board) == 0:
            print("AI is making a move...")
            best_move = find_best_move(board)
            board[best_move[0]][best_move[1]] = AI

        # Check if the game is over
        if evaluate(board) == 10:
            print_board(board)
            print("AI wins!")
            break
        elif not is_moves_left(board):
            print_board(board)
            print("It's a draw!")
            break

# Run the game
play_game()
